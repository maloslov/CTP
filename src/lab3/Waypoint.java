package lab3;

/**
 * This class represents a single step in a path generated by the A* pathfinding
 * algorithm.  Waypoints consist of a location, the previous waypoint in the
 * path, and some cost values used to determine the best path.
 *
 * Этот класс представляет единичный шаг в сформированным А* пути.
 * Вершины содержат местоположение, предыдущую вершину в пути, и
 * некоторые значения стоимости, используемые для определения лучшего пути.
 **/
public class Waypoint
{
    /** The location of this waypoint.
     *
     *  Местоположение текущей вершины.
     **/
    Location loc;

    /**
     * The previous waypoint in this path, or <code>null</code> if this is
     * the root of the A* search.
     *
     * Предыдущая вершина в пути, или нуль если это корень поиска А*.
     **/
    Waypoint prevWaypoint;

    /**
     * This field stores the total previous cost of getting from the starting
     * location to this waypoint, through the chain of waypoints.  This is an
     * actual cost of following the path; it does not include any estimates.
     *
     * Это поле содержит общую предыдущую стоимость от начального места до текущей вершины.
     * Это настоящая стоимость последующего пути; она исключает всякие оценки.
     **/
    private float prevCost;

    /**
     * This field stores an estimate of the remaining cost of traveling from
     * this waypoint to the final destination.
     *
     * Это поле содержит оценку оставшейся стоимости путешествия из этой вершины
     * к конечной.
     **/
    private float remainingCost;


    /**
     * Construct a new waypoint for the specified location.  A previous waypoint
     * can optionally be specified, or the reference can be <code>null</code> to
     * indicate that the waypoint is the start of the path.
     *
     * Конструктор новой вершины для заданного места. Предыдущая вершиина
     * может выборочно быть обособлена, или ссылка может быть нулевой для сигнализации,
     * что вершина является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Returns the location of the waypoint.
     *
     * Возвращает местоположение вершины.
     **/
    public Location getLocation()
    {
        return loc;
    }
    
    /**
     * Returns the previous waypoint in the path, or <code>null</code> if this
     * is the start of the path.
     *
     * Возвращает предыдущую вершину пути, или нуль если начало пути.
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }
    
    /**
     * This mutator allows both the previous cost and the remaining cost to be
     * set in one method call.  Normally these values will be set at the same
     * time anyway.
     *
     * Этот модифицирующий метод учитывает обе стоимости: предыдущую и оставшуюся
     * для назначения в одном вызове метода. Обычно эти значения будут устанавливаться
     * одновременно в любом случае.
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Returns the actual cost of getting to this point from the starting
     * location, through the series of waypoints in this chain.
     *
     * Возвращает настоящую стоимость до это точки от начального места,
     * через ряд вершин в цепи.
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     * Returns an estimate of the remaining cost of traveling from this
     * point to the final destination.
     *
     * Возвращает оценку оставшейся стоимости потушествия от текущей
     * точки до назначения.
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /**
     * Returns the total cost estimate for this waypoint.  This includes the
     * actual cost of getting to this point from the starting location, plus
     * the estimate of the remaining cost of traveling from this point to
     * the final destination.
     *
     * Возвращает общую стоимость оценки для вершины. Включая настоящую сттоимость
     * до этой точки от начала. плюс оценка оставшейся стоимости перехода от текущей
     * до точки назначения.
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}

